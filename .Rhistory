?test
?t
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-2.0")
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-2.0")
install.packages(c("rj", "rj.gd"), repos="http://download.walware.de/rj-2.0")
install.packages(c("rj.gd"), repos="http://download.walware.de/rj-2.0")
?install.packages
install.packages("rjava")
install.packages("rJava")
install.packages(c("rj.gd"), repos="http://download.walware.de/rj-2.0")
f <- "C:/Input_data/LC, nanoLC/20150206 enviMass 125 loop test//20150201_08_436B_Aadorf_spike00_elute.mzML"
library(mzR)
d <- openMSfile(f)
h <- header(d)
headerMS1 <- headerData[
(headerData$msLevel == 1) ,]
headerData <- header(d)
headerMS1 <- headerData[
(headerData$msLevel == 1) ,]
pks <- mzR::peaks(msRaw, headerMS1$seqNum)
mzR:::close(d)
msRaw <- openMSfile(f)
pks <- mzR::peaks(msRaw, headerMS1$seqNum)
millis()
date()
print(date())
# 4 masses, extract EICs
masses <- c(274.21426,404.1241,237.1022,196.10186)
limits <- 0.0005
mzlimits <- masses[[1]] + c(-1,1) * limits
print(date())
headerMS1$mzMin <- mzlimits[[1]] + predict(floatingRecalibration, headerMS1$retentionTime)
headerMS1$mzMax <- mzlimits[[2]] + predict(floatingRecalibration, headerMS1$retentionTime)
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- mzR::peaks(msRaw, headerMS1[row,"acquisitionNum"])
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
print(date())
print(date())
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- mzR::peaks(msRaw, headerMS1[row,"acquisitionNum"])
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
print(date())
print(date())
for(mass in masses)
{
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- mzR::peaks(msRaw, headerMS1[row,"acquisitionNum"])
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".")
}
print(date())
print(d1 <- date())
d1
?date
Sys.time()
system.time
system.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
proc.time()
system.time()
proc.time()
proc.time()
proc.time()
proc.time()
print(date())
system.time(
{
for(mass in masses)
{
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- mzR::peaks(msRaw, headerMS1[row,"acquisitionNum"])
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".")
}
})
print(date())
print(date())
system.time(
{
for(mass in masses)
{
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- mzR::peaks(msRaw, headerMS1[row,"acquisitionNum"])
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".", appendLF = FALSE)
}
})
print(date())
print("Buffered peak tables:")
print(date())
system.time(
{
for(mass in masses)
{
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- pks[[row]]
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".", appendLF = FALSE)
}
})
print(date())
print("Unbuffered peak tables:")
print(date())
system.time(
{
for(mass in masses)
{
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- mzR::peaks(msRaw, headerMS1[row,"acquisitionNum"])
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".", appendLF = FALSE)
}
})
print(date())
plot(intensity)
print(which(max(intensity)))
print(which.max(intensity))
print(max(intensity))
print("Buffered peak tables:")
print(date())
system.time(
{
for(mass in masses)
{
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- pks[[row]]
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".", appendLF = FALSE)
}
})
print(date())
plot(intensity)
rm(intensity)
print("Buffered peak tables:")
print(date())
system.time(
{
for(mass in masses)
{
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- pks[[row]]
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".", appendLF = FALSE)
}
})
print(date())
plot(intensity)
print(which.max(intensity))
print(max(intensity))
rm(intensity)
print("Batch loaded tables:")
print(date())
system.time(
{
for(mass in masses)
{
rm(pks)
pks <- mzR::peaks(msRaw, headerMS1$seqNum)
mzlimits <- mass + c(-1,1) * limits
headerMS1$mzMin <- mzlimits[[1]]
headerMS1$mzMax <- mzlimits[[2]]
intensity <- unlist(lapply(1:nrow(headerMS1), function(row)
{
peaktable <- pks[[row]]
sum(peaktable[
which((peaktable[,1] >= headerMS1[row,"mzMin"]) & (peaktable[,1] <= headerMS1[row,"mzMax"])),
2])
}))
message(".", appendLF = FALSE)
}
})
print(date())
plot(intensity)
print(which.max(intensity))
print(max(intensity))
headerMS1$seqNum[1:30]
headerMS1$acquisitionNum[1:30]
?header
library(rcdk)
library(BiocInstaller)
biocLite()
biocLite("Rcpp")
biocLite("plyr")
getOption("RMassBank")$recalibrateMS1
getOption("RMassBank")
?table
?`||
`
?`||`
?match
?`[^
`
?`[`
?lapply
?data.frame
?do.call
library(devtools)
dev_mode(on=T, path="C:/Archives_libraries/R/R-dev")
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
load_all(rmb)
library(rcdk)
library(rcdk)
System.env("JAVA_PATH")
?environment
?Sys.getenv("JAVA_HOME")
Sys.getenv("JAVA_HOME")
library(devtools)
dev_mode(on=T, path="C:/Archives_libraries/R/R-dev")
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
install(rmb, args="--no-multiarch")
setwd("C:/Daten/RMassBank/meowcat/RMassBank")
library(RMassBank)
loadRmbSettings("mysettings.ini")
w <- newMsmsWorkspace()
files <- list.files(system.file("spectra", package="RMassBankData"),
".mzML", full.names = TRUE)
basename(files)
# To make the workflow faster here, we use only 2 compounds:
w@files <- files[1:2]
loadList("./Compoundlist.csv")
w <- msmsWorkflow(w, mode="pH", steps=c(1), archivename =
"pH_narcotics")
w
w <- msmsWorkflow(w, mode="pH", steps=c(2), archivename =
"pH_narcotics")
w
w <- msmsWorkflow(w, mode="pH", steps=c(3), archivename =
"pH_narcotics")
w
w <- msmsWorkflow(w, mode="pH", steps=c(4), archivename =
"pH_narcotics")
w
w <- msmsWorkflow(w, mode="pH", steps=c(5), archivename =
"pH_narcotics")
w
w <- msmsWorkflow(w, mode="pH", steps=c(6), archivename =
"pH_narcotics")
w
w <- msmsWorkflow(w, mode="pH", steps=c(7), archivename =
"pH_narcotics")
w
w <- msmsWorkflow(w, mode="pH", steps=c(8), archivename =
"pH_narcotics")
w
colnames(selectPeaks(w))
colnames(RMassBank::selectPeaks(w))
colnames(RMassBank:::selectPeaks(w))
slotNames(w@spectra[[1]])
slotNames(w@spectra[[1]]@children[[1]])
getData(w@spectra[[1]]@children[[1]])
RMassBank:::getData(w@spectra[[1]]@children[[1]])
df <- RMassBank:::getData(w@spectra[[1]]@children[[1]])
View(df)
colnames(w@aggregated)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb, clean=T)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb, clean=T)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb, clean=T)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb, clean=T)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb, clean=T)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb, clean=T)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb, clean=T)
warnings()
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb)
warnings()
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb)
warnings()
check_doc(rmb)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb)
warnings()
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb)
warnings()
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
document(rmb)
check_doc(rmb)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
check_doc(rmb)
check_doc(rmb)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
check_doc(rmb)
check_doc(rmb)
check_doc(rmb)
check_doc(rmb)
check_doc(rmb)
rmb <- as.package("C:/Daten/RMassBank/meowcat/RMassBank")
check_doc(rmb)
check_doc(rmb)
library(RMassBank)
